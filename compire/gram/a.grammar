start
  :== stmts

stmts
  :== stmts {{ Nx=new_label() }}  stmt
    | {{ Nx=new_label() }} stmt

stmt
  :== if_else_stmt
    | declare
    | NODE         {{ gen({1}.val) }}
    | assignment_expression

if_else_stmt
  :== if_clause
    | if_clause else_clause

if_clause
  :== 'if' '('  {{ L1 = new_label() }}
      test ')'
      NODE
      {{ Nx={0}.Nx; L1={3}.L1; tmp = 'if ! '+{4}.true+' goto '+L1;
      }}

else_clause
  :== 'else'
      {{Nx={0}.Nx;g='goto '+{0}.Nx; l='label '; l1=l+{0}.L1; l2=l+{0}.Nx;
        gen(g,l1, l2)}}
      stmt

test
  :== NUMBER COMP NUMBER   {{ true=' '.join([{1}.val, {2}.val, {3}.val]) }}

declare
  :== declare type ID ';'
      {{ offset = environ.w;
         environ.update([( {3}.val, Entry({2}.tp, {2}.tp.w, offset) )])
      }}
    | type ID ';'
      {{ offset = environ.w;
         environ.update([( {2}.val, Entry({1}.tp, {1}.tp.w, offset) )]);
      }}

type
  :== base component                      {{ tp={2}.tp; }}
    | base                                {{ tp={1}.tp; }}
    | 'record' '{' {{ global environ; bk=environ; environ=newEnv() }}
      declare '}'
      {{ global environ;w=environ.w; tp=Type(environ, w);
         environ={3}.bk;
      }}

base
  :== 'int'                               {{ tp=Type('int',4) }}
    | 'float'                             {{ tp=Type('float',8) }}

component
  :== '[' NUMBER ']'  {{ bt={0}.tp; tp=Type(bt, bt.w*int({2}.val)) }}
    | '[' NUMBER ']' {{tp={0}.tp}} component
      {{ bt={5}.tp; v=int({2}.val); tp=Type(bt, bt.w*v) }}
assignment_expression
  :== ID '=' expression ';'
      {{ gen(environ.getsym({1}.val), '=', {3}.addr) }}
    | postfix_expression '=' expression ';'  {{gen({1}.base,'[', {1}.addr ,']','=',{3}.addr) }}

expression
  :== expression OP expression
      {{ addr=new_tmp(); gen(addr, '=', {1}.addr, {2}.val, {3}.addr) }}
    | '-' expression {{ addr=new_tmp(); gen(addr, '=', 'minus', {2}.addr)}}
    | '(' expression ')' {{ addr = {2}.addr }}
    | ID  {{ addr = environ.getsym({1}.val) }}
    | NUMBER  {{ addr = {1}.val }}
    | postfix_expression {{addr = new_tmp(); gen(addr, '=', {1}.base, '[', {1}.addr, ']')}}

postfix_expression
  :== ID '[' expression ']'
      {{ array=environ.get({1}.val);
         base = {1}.val;
         tp=array.t; addr=new_tmp();
         gen(addr,'=', {3}.addr, '*', str(tp.t.w));
      }}
    | postfix_expression '[' expression ']'
      {{ array={1}.array;
         base={1}.base;
         tp={1}.tp.t; t=new_tmp(); addr=new_tmp();
         gen(t,'=', {3}.addr, '*', str(tp.t.w));
         gen(addr, '=', {1}.addr, '+', t);
      }}

-------------------------------------------------------

import re
import collections
from reprlib import recursive_repr as _recursive_repr


class SymTb(collections.OrderedDict):
    """Store symbols in an OrderedDict."""
    def __setitem__(self, key, value):
        if key in self:
            raise KeyError(f"duplicated declarations!! {key} ")
        else:
            collections.OrderedDict.__setitem__(self, key, value)

    def __str__(self):
        return  f'''{','.join(list(map(lambda x: '_'.join([x[1][0].__repr__(),
        x[0]]),filter(lambda x: x[0] , self.items())))) }'''

    @_recursive_repr()
    def __repr__(self):
        'od.__repr__() <==> repr(od)'
        if not self:
            return 'SymT()'
        l = ',  '.join(list(
                    map(lambda x: f"""{'-'.join([x[0], x[1].__repr__()])}""",
                     filter(lambda x: x[0], self.items()))))
        return 'SymT(%s)' % (l)

    #@property
    #def t(self):
    #    return 'Syms'

    @property
    def w(self):
        item = self[next(reversed(self))]
        return item.w+item.f

    def getsym(self, key):
        if self.get(key):
            return key
        else:
            raise KeyError('Not declared variable: {key}')

Type = collections.namedtuple('Type', 't w')
Type.__str__=lambda self: \
    self.t if isinstance(self.t, str) else \
    re.sub(r'^([^[]+)',f'\\1[{self.w//self.t.w}]', self.t.__str__()) if \
    isinstance(self.t, Type) else self.t.__str__()
Type.__repr__=lambda self: self.__str__()

Entry = collections.namedtuple('Entry', 't w f', defaults=['',0,0])
Entry.__repr__ = lambda self: f'{self.t}-{self.w}-{self.f}'
newEnv = lambda : SymTb({'': Entry()})

def init():
    global code, symbol_table, environ, allabels, templabels
    code = ""
    symbol_table = {'global':newEnv()}
    environ = symbol_table['global']
    allabels = []
    templabels = []

init()

def new_label():
    n = 'L' + str(len(allabels))
    allabels.append(n)
    return n


def gen(*args):
    global code
    code += ' '.join(args) + '\n'


def new_tmp():
    n = 'T' + str(len(templabels))
    templabels.append(n)
    return n

def clear_tmp():
    templabels.clear()