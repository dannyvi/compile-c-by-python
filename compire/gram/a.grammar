start      :== stmts                                {{start}}
stmts      :== stmts stmt                           {{stmts1}}
stmts      :== stmt                                 {{stmts2}}
stmt       :== "if" "(" "C" ")"
               "S1" "else"
                "stmts"
                                           {{stmt1}} | "if" "("
                                           "C" ")" "S1" {{stmt2}}
stmt       :== declare                              {{stmt3}}
declare    :== type ID ";"                          {{declare}}
type       :== base                                 {{type1}}
# type       :== base composit                        {{type2}}
base       :== "int"                                {{base1}}
base       :== "float"                              {{base2}}
# composit   :== "[" NUMBER "]"                       {{composit1}}
# composit   :== "[" NUMBER "]"  composit             {{composit2}}

-------------------------------------------------------

import collections

all_labels = []

symbol_table = {}

Symbol = collections.namedtuple("Symbol", ["name", "type", "width"])

class Prop:
    pass

def get_label():
    n = 'L' + str(len(all_labels))
    all_labels.append(n)
    return n


def start(stmts_cb):
    def callback():
        return stmts_cb()
    return callback


def stmts1(stmts_cb, stmt_cb):
    def callback():
        s = stmts_cb()
        end_label = get_label()
        inh = Prop()
        inh.next_label = end_label
        trans = s + stmt_cb(inh)
        return trans
    return callback

def stmts2(stmt_cb):
    def callback():
        end_label = get_label()
        inh = Prop()
        inh.next_label = end_label
        return stmt_cb(inh)
    return callback


def stmt1(IF, LPAR, c, RPAR, s1, ELSE, s2):
    def callback(inh):
        L1 = get_label()
        C_code = c.code(f_cond=L1)
        S1_code = s1.code()
        S2_code = s2.code()
        inter_code = """\
        {}
        {}
        goto {}
        label {}
        {}""".format(C_code, S1_code, inh.next_label, L1, S2_code)
        return inter_code
    return callback

def stmt2(IF, LPAR, c, RPAR, s1):
    def callback(inh):
        L1 = get_label()
        C_code = c.code(f_cond=L1)
        S1_code = s1.code()
        inter_code = """\
        {}
        {}
        goto {}
        label {}""".format(C_code, S1_code, inh.next_label, L1 )
        return inter_code
    return callback

def stmt3(declare_cb):
    def callback(inh):
        return declare_cb()
    return callback

def declare(_type, _id, end):
    def callback():
        symbol = Symbol(_id.value, _type.name, _type.width)
        symbol_table[_id.value] = symbol
        return ''
    return callback

def type1(base):
    syn = Prop()
    syn.name = base.name
    syn.width = base.width
    return syn

def base1(integer):
    syn = Prop()
    syn.name = 'int'
    syn.width = 4
    return syn

def base2(_float):
    syn = Prop()
    syn.name = 'float'
    syn.width = 4
    return syn
