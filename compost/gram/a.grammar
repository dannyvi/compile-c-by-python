start      :== unit                                 {{start}}

unit
  :== ex_declare                                    {{unit1}}

ex_declare
  :== func_def                                      {{ex_declare1}}
    | expr                                          {{ex_declare2}}

func_def
  :== proto compound_stmt                           {{func_def}}

proto
  :== decl '(' parameters ')'                       {{proto}}

parameters
  :== decl                                          {{parameters1}}
    | parameters ',' decl                           {{parameters2}}

compound_stmt
  :== '{' stmts '}'                                 {{cpd_stmt1}}

stmts
  :== stmts stmt                                    {{stmts1}}
    | stmt                                          {{stmts2}}

stmt
  :== "if" "(" "C" ")" "S1" "else" "stmts"          {{stmt1}}
    | declare                                       {{stmt3}}
    | expr                                          {{stmt4}}

expr
  :== expr OP expr                                  {{expr1}}
    | '(' expr ')'                                  {{expr2}}
    | NUMBER                                        {{expr3}}
    | ID                                            {{expr5}}
    | ID '(' expr ')'                                 {{expr4}}

declare
  :== decl ";"                                      {{declare}}

decl
  :== type ID                                       {{decl}}

type
  :== base                                          {{type1}}
    | base composit                                 {{type2}}

base
  :== "int"                                         {{base1}}
    | "float"                                       {{base2}}

composit
  :== "[" NUMBER "]"                                {{composit1}}
    | "[" NUMBER "]"  composit                      {{composit2}}

-------------------------------------------------------

import collections
from compost.parse import ast
import llvmlite.ir as ir

all_labels = []

symbol_table = {}

Symbol = collections.namedtuple("Symbol", ["name", "type", "width"])

class Prop:
    pass

def get_label():
    n = 'L' + str(len(all_labels))
    all_labels.append(n)
    return n


def start(node):
    return node

def unit1(node):
    return node

def ex_declare1(node):
    return node

def ex_declare2(node):
    return ast.Function.create_anonymous(ir.IntType(32), node)

def func_def(proto, stmt):
    proto = proto
    body = stmt
    return ast.Function(proto, body)

def proto(decl, LPAR, paras, RPAR):
    return ast.Prototype(decl.typ, decl.name, paras)

def parameters1(decl):
    return [decl,]

def parameters2(paras, COMMA, decl):
    return paras.append(decl)

def cpd_stmt1(LCUR, stmts, RCUR):
    return stmts

def stmts1(nodes, node):
    return node

def stmts2(node):
    return node


def stmt1(IF, LPAR, c, RPAR, s1, ELSE, s2):
    def callback(inh):
        L1 = get_label()
        C_code = c.code(f_cond=L1)
        S1_code = s1.code()
        S2_code = s2.code()
        inter_code = """\
        {}
        {}
        goto {}
        label {}
        {}""".format(C_code, S1_code, inh.next_label, L1, S2_code)
        return inter_code
    return callback

def stmt2(IF, LPAR, c, RPAR, s1):
    def callback(inh):
        L1 = get_label()
        C_code = c.code(f_cond=L1)
        S1_code = s1.code()
        inter_code = """\
        {}
        {}
        goto {}
        label {}""".format(C_code, S1_code, inh.next_label, L1 )
        return inter_code
    return callback

def stmt3(declare_cb):
    def callback(inh):
        return declare_cb()
    return callback

def stmt4(expr):
    return expr

def declare(_type, _id, end):
    def callback():
        symbol = Symbol(_id.value, _type.name, _type.width)
        symbol_table[_id.value] = symbol
        return ''
    return callback

def decl(typ, token):
    return ast.Decl(typ, token.value)

def type1(base):
    return base

def type2(base, composit):
    syn = Prop()
    syn.name = base.name
    syn.width = base.width
    return syn

def base1(integer):
    return ir.IntType(32)

def base2(_float):
    return ir.FloatType(32)

def composit1(LPAR, number, RPAR):
    pass

def composit2(LPAR, number, RPAR, composit):
    pass


def expr1(expr1, op, expr2):
    return ast.Binary(op.value, expr1, expr2)

def expr2(LPAR, expr, RPAR):
    return expr


def expr3(number):
    return ast.Number(number.value)

def expr4(name, LPAR, arg, RPAR):
    return ast.Call(name.value, [arg,])

def expr5(name):
    return ast.Variable(name.value)
