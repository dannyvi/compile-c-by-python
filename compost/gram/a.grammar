start      :== stmts                                {{start}}
stmts
  :== stmts stmt                                    {{stmts1}}
    | stmt                                          {{stmts2}}
stmt
  :== "if" "(" "C" ")"
               "S1" "else"
                "stmts"
                                                    {{stmt1}}
    | "if" "(" "C" ")" "S1"                         {{stmt2}}
    | declare                                       {{stmt3}}
    | expr                                          {{stmt4}}

expr
  :== expr OP expr                                  {{expr1}}
    | '(' expr ')'                                  {{expr2}}
    | NUMBER                                        {{expr3}}

declare
  :== type ID ";"                                   {{declare}}
type
  :== base                                          {{type1}}
    | base composit                                 {{type2}}
base
  :== "int"                                         {{base1}}
    | "float"                                       {{base2}}
composit
  :== "[" NUMBER "]"                                {{composit1}}
    | "[" NUMBER "]"  composit                      {{composit2}}

-------------------------------------------------------

import collections
from compost.parse import ast

all_labels = []

symbol_table = {}

Symbol = collections.namedtuple("Symbol", ["name", "type", "width"])

class Prop:
    pass

def get_label():
    n = 'L' + str(len(all_labels))
    all_labels.append(n)
    return n


def start(node):
    return node


def stmts1(stmts_cb, stmt_cb):
    def callback():
        s = stmts_cb()
        end_label = get_label()
        inh = Prop()
        inh.next_label = end_label
        trans = s + stmt_cb(inh)
        return trans
    return callback

def stmts2(node):
    return node


def stmt1(IF, LPAR, c, RPAR, s1, ELSE, s2):
    def callback(inh):
        L1 = get_label()
        C_code = c.code(f_cond=L1)
        S1_code = s1.code()
        S2_code = s2.code()
        inter_code = """\
        {}
        {}
        goto {}
        label {}
        {}""".format(C_code, S1_code, inh.next_label, L1, S2_code)
        return inter_code
    return callback

def stmt2(IF, LPAR, c, RPAR, s1):
    def callback(inh):
        L1 = get_label()
        C_code = c.code(f_cond=L1)
        S1_code = s1.code()
        inter_code = """\
        {}
        {}
        goto {}
        label {}""".format(C_code, S1_code, inh.next_label, L1 )
        return inter_code
    return callback

def stmt3(declare_cb):
    def callback(inh):
        return declare_cb()
    return callback

def stmt4(expr):
    return expr

def declare(_type, _id, end):
    def callback():
        symbol = Symbol(_id.value, _type.name, _type.width)
        symbol_table[_id.value] = symbol
        return ''
    return callback

def type1(base):
    syn = Prop()
    syn.name = base.name
    syn.width = base.width
    return syn

def type2(base, composit):
    syn = Prop()
    syn.name = base.name
    syn.width = base.width
    return syn

def base1(integer):
    syn = Prop()
    syn.name = 'int'
    syn.width = 4
    return syn

def base2(_float):
    syn = Prop()
    syn.name = 'float'
    syn.width = 4
    return syn

def composit1(LPAR, number, RPAR):
    pass

def composit2(LPAR, number, RPAR, composit):
    pass


def expr1(expr1, op, expr2):
    return ast.Binary(op.value, expr1, expr2)

def expr2(LPAR, expr, RPAR):
    return expr


def expr3(number):
    return ast.Number(number.value)